#!/bin/sh

clang_bin_dir=`dirname "$0"`
clang_prefix="$clang_bin_dir/.."

# Try and find the real Clang executable. $GNOME_CLANG_CC trumps everything.
# Otherwise assume clang is in the same directory as this script.
if [ "x$GNOME_CLANG_CC" != "x" ]; then
	real_clang="$GNOME_CLANG_CC"
elif [ -f "$clang_prefix/bin/clang" ]; then
	real_clang="$clang_prefix/bin/clang"
elif [ -f /usr/bin/clang ]; then
	real_clang=/usr/bin/clang
else
	echo "Error: Could not find clang executable. Set GNOME_CLANG_CC to the absolute path of the real clang executable." >& 2
fi

# Extract the clang version.
# clang --version returns something like:
#     clang version 3.3 (tags/RELEASE_33/rc3)
#     Target: x86_64-redhat-linux-gnu
#     Thread model: posix
clang_version=`"$real_clang" --version | head -n1 | cut -f3 -d ' '`

# Try and find the gnome-clang plugin. $GNOME_CLANG_PLUGIN trumps everything.
if [ "x$GNOME_CLANG_PLUGIN" != "x" ]; then
	plugin_path="$GNOME_CLANG_PLUGIN"
elif [ -f "$clang_prefix/lib64/gnome-clang/$clang_version/libclang-gnome.so" ]; then
	plugin_path="$clang_prefix/lib64/gnome-clang/$clang_version/libclang-gnome.so"
elif [ -f "$clang_prefix/lib/gnome-clang/$clang_version/libclang-gnome.so" ]; then
	plugin_path="$clang_prefix/lib/gnome-clang/$clang_version/libclang-gnome.so"
else
	echo "Error: Could not find libclang-gnome.so. Set GNOME_CLANG_PLUGIN to the absolute path of the gnome-clang plugin." >& 2
fi

plugin_name=gnome

# Process GNOME_CLANG_OPTIONS, prefixing everything with -plugin-arg-gnome to
# ensure Clang passes it to (only) the plugin.
plugin_options=()
for arg in $GNOME_CLANG_OPTIONS; do
	plugin_options+=( '-plugin-arg-gnome' )
	plugin_options+=( "$arg" )
done

# Clang canâ€™t accept -load as the first argument.
first_arg=$1
shift

# Exec Clang with the plugin loaded.
exec "$real_clang" \
	"$first_arg" \
	-load "$plugin_path" \
	-add-plugin "$plugin_name" \
	${plugin_gir_options[@]} \
	${plugin_options[@]} \
	$GNOME_CLANG_CFLAGS \
	"$@"
